geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d <- x['global',]
d <- d %>% filter(cum_confirm > 100 & country == "Denmark" |  country == "Germany")
head(d)
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d <- d %>% filter(cum_confirm > 100 & country == "Denmark" |  country == "Germany" |  country == "Switzerland")
d <- x['global',]
d <- d %>% filter(cum_confirm > 100 & country == "Denmark" |  country == "Germany" |  country == "Switzerland")
head(d)
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d <- x['global',]
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(summary(x), aes(as.Date(date, "%m.%d"), as.numeric(confirm))) +
geom_col(fill='firebrick') + theme_minimal(base_size = 14) +
xlab(NULL) + ylab(NULL) +
labs(caption = paste("accessed date:", time(x)))
plot
library(lubridate)
library(ggplot2)
ggplot(summary(x), aes(as.Date(date, "%m.%d"), as.numeric(confirm))) +
geom_col(fill='firebrick') + theme_minimal(base_size = 14) +
xlab(NULL) + ylab(NULL) +
labs(caption = paste("accessed date:", time(x)))
# Cumulative plot
library(lubridate)
library(ggplot2)
ggplot(summary(x), aes(as.Date(date, "%m.%d"), as.numeric(confirm))) +
geom_col(fill='firebrick') + theme_minimal(base_size = 14) +
xlab(NULL) + ylab(NULL) +
labs(caption = paste("accessed date:", time(x)))
# use this data for visualization. So hereâ€™s a quick example for Anhui.
library(tidyverse)
ggplot(d, aes(name, confirm)) +
geom_col(fill='steelblue') + coord_flip() +
geom_text(aes(y = confirm+2, label=confirm), hjust=0) +
theme_minimal(base_size=14) +
scale_y_continuous(expand=c(0,10)) +
xlab(NULL) + ylab(NULL)
# show global distribution
plot(x)
d <- x['global',]
d <- d %>% filter(cum_confirm > 100 & country != "China")
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
library(ggplot2)
y <- load_nCov2019(lang = 'en')
d <- y['global']
max_time <- max(d$time)
min_time <- max_time - 7
d <- na.omit(d[d$time >= min_time & d$time <= max_time,])
dd <- d[d$time == max(d$time, na.rm = TRUE),]
d$country <- factor(d$country,
levels=dd$country[order(dd$cum_dead)])
breaks = c(10, 100, 1000, 10000)
ggplot(d, aes(time, country)) +
geom_tile(aes(fill = cum_dead), color = 'black') +
scale_fill_viridis_c(trans = 'log', breaks = breaks,
labels = breaks) +
xlab(NULL) + ylab(NULL) +
scale_x_date(date_labels = "%Y-%m-%d") + theme_minimal()
library(ggplot2)
y <- load_nCov2019(lang = 'en')
d <- y['global']
max_time <- max(d$time)
min_time <- max_time - 7
d <- na.omit(d[d$time >= min_time & d$time <= max_time,])
dd <- d[d$time == max(d$time, na.rm = TRUE),]
d$country <- factor(d$country,
levels=dd$country[order(dd$cum_confirm)])
breaks = c(10, 100, 1000, 10000)
ggplot(d, aes(time, country)) +
geom_tile(aes(fill = cum_confirm), color = 'black') +
scale_fill_viridis_c(trans = 'log', breaks = breaks,
labels = breaks) +
xlab(NULL) + ylab(NULL) +
scale_x_date(date_labels = "%Y-%m-%d") + theme_minimal()
require(chinamap)
cn = get_map_china()
## translate province
cn$province <- trans_province(cn$province)
plot(x, chinamap=cn)
library(mapproj)
plot(x, region='china', chinamap=cn, font.size=2)
# see what the situation is. This data is collected from Tencent,
# at https://news.qq.com/zt2020/page/feiyan.htm,
# which contains one of the most up-to-date public information of the coronavirus.
x
# To look at the global data, you can run the code
x["global",]
x["Anhui",]
source(example.R)
source("example.R")
# Install the Coronavirus package
remotes::install_github("GuangchuangYu/nCov2019")
source("example.R")
library(nCov2019)
source("example.R")
source("../nCov2019/example.R")
knitr::opts_chunk$set(echo = TRUE)
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
library(ggplot)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nCov2019)
x <- get_nCov2019(lang='en')
library(ggplot)
library(ggplot2)
library(ggrepel)
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
library(ggplot2)
require(ggrepel)
d <- y['Anhui',] # replace Anhui with any province
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=name), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=name), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
# little check on the Czechs
e <- x['global']
which(e[,"name"]=="Denmark") # can we filter for an individual country?
e[4,]
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=name), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=name), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
# little check on the Czechs
e <- y['global']
e[4,]
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=name), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= "country")) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d <- y['Anhui',] # replace Anhui with any province or global dataset
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d[5,]
e[4,]
e <- y['global']
e[4,]
require(ggrepel)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
library(nCov2019)
x <- get_nCov2019(lang='en')
# Install the Coronavirus package
remotes::install_github("GuangchuangYu/nCov2019")
# Install the Coronavirus package
remotes::install_github("GuangchuangYu/nCov2019")
# Install the Coronavirus package
remotes::install_github("GuangchuangYu/nCov2019")
# show global distribution
plot(x)
x <- get_nCov2019(lang='en')
library(nCov2019)
x <- get_nCov2019(lang='en')
# see what the situation is. This data is collected from Tencent,
# at https://news.qq.com/zt2020/page/feiyan.htm,
# which contains one of the most up-to-date public information of the coronavirus.
x
# To look at the global data, you can run the code
x["global",]
# show global distribution
plot(x)
library(tidyverse)
library(forcats)
library(ggplot2)
source("../nCov2019/example.R")
d = x['global',]
d$confirm=as.numeric(d$confirm)
d$name = fct_reorder(d$name, d$confirm)
ggplot(d, aes(name, confirm)) +
geom_col(fill='steelblue') + coord_flip() +
geom_text(aes(y = confirm+2, label=confirm), hjust=0) +
theme_minimal(base_size=14) +
scale_y_continuous(expand=c(0,10)) +
xlab(NULL) + ylab(NULL)
# Summarize data, if you wanted to view the new daily cases, you could use the
summary(x, by="today")
# Summarize data, if you wanted to view the new daily cases, you could use the
summary(d, by="today")
# Summarize data, if you wanted to view the new daily cases, you could use the
summary(x, by="today")
library(lubridate)
library(ggplot2)
ggplot(summary(x), aes(as.Date(date, "%m.%d"), as.numeric(confirm))) +
geom_col(fill='firebrick') + theme_minimal(base_size = 14) +
xlab(NULL) + ylab(NULL) +
labs(caption = paste("accessed date:", time(x)))
# dead across the world
ggplot(summary(x), aes(as.Date(date, "%m.%d"), as.numeric(dead))) +
geom_col(fill='firebrick') + theme_minimal(base_size = 14) +
xlab(NULL) + ylab(NULL) +
labs(caption = paste("accessed date:", time(x)))
# deathrate across the world
ggplot(summary(x), aes(as.Date(date, "%m.%d"), as.numeric(deadRate))) +
geom_col(fill='firebrick') + theme_minimal(base_size = 14) +
xlab(NULL) + ylab(NULL) +
labs(caption = paste("accessed date:", time(x)))
y <- load_nCov2019(lang='en')
y
head(y[][c(1:10, 9:11)])
head(y['Hubei'])
head(y)
#head(y[][c(1:10, 9:11)])
head(y['Hubei'])
#head(y[][c(1:10, 9:11)])
head(y['Hubei'],city=="Wuhan")
#head(y[][c(1:10, 9:11)])
head(y['Hubei' city=="Wuhan"],)
#head(y[][c(1:10, 9:11)])
head(y['Hubei', city=="Wuhan"],)
#head(y[][c(1:10, 9:11)])
head(y['Hubei'],)
# little check on the Czechs
e <- y['global']
e[today]
head(e)
tail(e)
e[by=today]
e[,by=today]
e[by=today,]
summarize(e, by= "today")
which(e[,"name"]=="Denmark") # can we filter for an individual country?
which(e[,"country"]=="Denmark") # can we filter for an individual country?
e[28,] # Denmark is still in
e[820,] # Denmark is still in
which(e[,"country"]=="Czech Republic") # can we filter for an individual country?
require(ggrepel)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=e[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line() +
#geom_text_repel(aes(label=country), data=e[e$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=e[e$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
install.packages("ggrepel")
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
e[820,] # Denmark is still in
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line()
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color= country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=e$country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=e$country, color= e$country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=e$country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
tail(e)
# little check on the Czechs
e <- y['global']
tail(e)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
#geom_point() +
geom_line()
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
#geom_point() +
geom_line() +
#geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
#geom_point() +
geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(e, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
#geom_point() +
geom_line() +
geom_text_repel(aes(label=country), data=e[e$time == time(x), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d = x['Anhui',] # replace Anhui with any province
d$confirm=as.numeric(d$confirm)
d$name = fct_reorder(d$name, d$confirm)
ggplot(d, aes(name, confirm)) +
geom_col(fill='steelblue') + coord_flip() +
geom_text(aes(y = confirm+2, label=confirm), hjust=0) +
theme_minimal(base_size=14) +
scale_y_continuous(expand=c(0,10)) +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
library(ggplot2)
require(ggrepel)
d <- x['Anhui',] # replace Anhui with any province
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
head(d)
ggplot(d, aes(time, as.numeric(confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d <- y['Anhui',] # replace Anhui with any province or global dataset
d[5,]
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
head(x['Hubei', c(1:6, 9:11)]) # replace Hubei with any province
head(y['Hubei', c(1:6, 9:11)]) # replace Hubei with any province
y <- load_nCov2019(lang='en')
y
#head(y[][c(1:10, 9:11)])
head(y['Hubei'],)
head(y)
library(ggplot2)
require(ggrepel)
d <- y['Anhui',] # replace Anhui with any province or global dataset
d[5,]
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("ggrepel")
require(ggrepel)
d <- y['Anhui',] # replace Anhui with any province or global dataset
d[5,]
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
time(x)
time(y)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(y), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
d$time
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x[1]), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(y[1]), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
head(d)
time(y)
?time()
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(d), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x,), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
max_time <- max(d$time)
min_time <- max_time - 7
d <- na.omit(d[d$time >= min_time & d$time <= max_time,])
dd <- d[d$time == max(d$time, na.rm = TRUE),]
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
time(x)
a <- c(1,2,3,4,5, 6, 7, 8, 9 , 10, 11, 12, 13, 14)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(a), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
# Problem: sampling time-series. It seems the data is less good
require(graphics)
cycle(presidents)
# a simple series plot
plot(as.vector(time(presidents)), as.vector(presidents), type = "l")
presidents
?presidents
cycle(presidents)
# a simple series plot
plot(as.vector(time(presidents)), as.vector(presidents), type = "l")
ggplot(d, aes(time, as.numeric(cum_confirm), group=country, color=country)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=country), data=d[d$time == as.vector(time(x)), ], hjust=0) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
as.vector(time(x))
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == as.vector(time(x)), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(x), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
time(y)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == as.vector(time(y)), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(y), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
ggplot(d, aes(time, as.numeric(cum_confirm), group=city, color=city)) +
geom_point() + geom_line() +
geom_text_repel(aes(label=city), data=d[d$time == time(d), ], hjust=1) +
theme_minimal(base_size = 14) + theme(legend.position='none') +
xlab(NULL) + ylab(NULL)
